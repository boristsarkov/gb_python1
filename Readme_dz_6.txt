# Задание №1
# "Не используя библиотеки для парсинга, распарсить (получить определённые данные) файл логов web-сервера nginx_logs.txt"
# В целом с этим заданием проблем больших не возникло. Немного по началу была затыка с красотой вывода. Но в целом все получилось
#
# Задание №2
# "Найти IP адрес спамера и количество отправленных им запросов по данным файла логов из предыдущего задания."
# Это задание со *. Списывать не стал. 
#
# Задание №3
# "Есть два файла: в одном хранятся ФИО пользователей сайта, а в другом  — данные об их хобби. Известно, что при хранении данных используется принцип: одна строка — один пользователь, разделитель между значениями — запятая. Написать код, загружающий данные из обоих файлов и формирующий из них словарь: ключи — ФИО, значения — данные о хобби. Сохранить словарь в файл. Проверить сохранённые данные. Если в файле, хранящем данные о хобби, меньше записей, чем в файле с ФИО, задаём в словаре значение None. Если наоборот — выходим из скрипта с кодом «1». При решении задачи считать, что объём данных в файлах во много раз меньше объема ОЗУ."
# Данное задание до конца сам сделать не мог. С чтением файла проблем не возникло, а вот соеденить это все в Словарь я не смог. Тем более потом записать это в файл с расширением .json
# 
# Задание №4 
# "Задание со *. Решить задачу 3 для ситуации, когда объём данных в файлах превышает объём ОЗУ (разумеется, не нужно реально создавать такие большие файлы, это просто задел на будущее проекта). Только теперь не нужно создавать словарь с данными. Вместо этого нужно сохранить объединенные данные в новый файл (users_hobby.txt). Хобби пишем через двоеточие и пробел после ФИО:"
# Это задание дополнительное, так как полностью с основным заданием сам не справился, то сделать этот не смог. 
#
# Задание №5
# "Задача со ** Решить задачу 4 и реализовать интерфейс командной строки, чтобы можно было задать имя обоих исходных файлов и имя выходного файла. Проверить работу скрипта."
# Так же с заданием спарвляться не стал из-за отсутствия полного понимания что происходит. 
#
# Задание №6
# "Реализовать простую систему хранения данных о суммах продаж булочной. Должно быть два скрипта с интерфейсом командной строки: для записи данных и для вывода на экран записанных данных. При записи передавать из командной строки значение суммы продаж. Для чтения данных реализовать в командной строке следующую логику:
просто запуск скрипта — выводить все записи;
запуск скрипта с одним параметром-числом — выводить все записи с номера, равного этому числу, до конца;
запуск скрипта с двумя числами — выводить записи, начиная с номера, равного первому числу, по номер, равный второму числу, включительно.
Подумать, как избежать чтения всего файла при реализации второго и третьего случаев.
Данные хранить в файле bakery.csv в кодировке utf-8. Нумерация записей начинается с 1. "
# С добавлением цен в целом разобраться удалось. С выводом этих цен со скриптами сложнее для меня оказалось
#
# Задание №7
# "Задание со * Добавить возможность редактирования данных при помощи отдельного скрипта: передаём ему номер записи и новое значение. При этом файл не должен читаться целиком — обязательное требование. Предусмотреть ситуацию, когда пользователь вводит номер записи, которой не существует."
# Дополнительное задание. Выолнить не смог. Так как не со всем разобрался в предыдущем задании
#
#
#
